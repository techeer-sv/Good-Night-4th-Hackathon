# Tickettock Frontend PRD (v0.1 Draft)

## 1. Overview
Tickettock is a web application to help users discover, book, and manage time-based event tickets (e.g., workshops, concerts, meetups) with real‑time availability updates and smooth mobile-friendly UX. This PRD defines the initial MVP scope for the frontend. (Assumption: We are building a greenfield Next.js + TypeScript app.)

## 2. Goals
- Enable anonymous browsing of events (list + detail)
- Provide user authentication (email/password + social OAuth placeholder)
- Allow logged-in users to book a ticket (single seat) and view their bookings
- Show real-time availability (stale-while-revalidate with background refresh)
- Fast initial load (Core Web Vitals: LCP < 2.5s on mid-tier mobile)

## 3. Non-Goals (MVP)
- Multi-seat group bookings
- Payment integration (mocked confirmation only)
- Admin event creation UI (seeded / mocked API for now)
- Complex notification system (basic toast only)

## 4. User Roles
1. Visitor: browse events
2. Authenticated User: browse + book + view bookings
3. (Future) Admin: manage events (out of scope)

## 5. Core Features
| ID | Feature | Description | Priority |
|----|---------|-------------|----------|
| F1 | Event Listing | Paginated, filterable list with availability badges | High |
| F2 | Event Detail | Detailed page: description, schedule, remaining seats | High |
| F3 | Auth | Signup/Login/Logout (email + password) | High |
| F4 | Booking Flow | Book seat, optimistic UI, error handling | High |
| F5 | My Bookings | List of user bookings w/ status | Medium |
| F6 | Global Navigation | Header, footer, responsive layout | Medium |
| F7 | Performance & Caching | SWR / React Query, prefetch key routes | High |
| F8 | Accessibility & SEO | Semantic structure, meta tags, Open Graph | Medium |
| F9 | Observability | Basic analytics + error boundary logging | Low |

## 6. Functional Requirements
### F1 Event Listing
- Server data: title, category, start time, venue, remainingSeats
- Pagination (page size 12) & category filter (client state)
- Loading & empty states

### F2 Event Detail
- Route: /events/[id]
- Displays all fields + booking button
- Auto-refetch remainingSeats every 30s (or on window focus) using React Query

### F3 Auth
- Simple credential form (client-side validation)
- Session persisted (assume JWT in httpOnly cookie via API; frontend reads session via /api/me)

### F4 Booking Flow
- POST /api/bookings -> returns bookingId + status=CONFIRMED (mock)
- Disabled button while in-flight; handle seat exhaustion conflict
- Optimistic update: decrement remainingSeats locally; rollback on error

### F5 My Bookings
- Route: /bookings
- List user bookings sorted by createdAt desc

### F6 Global Navigation
- Header with logo, links (Events, My Bookings (if authed), Login/Logout)
- Mobile menu (accessible)

### F7 Performance & Caching
- Use Next.js App Router w/ server components for data-heavy lists where possible
- Cache event list (React Query) w/ background refresh
- Image optimization (Next Image)

### F8 Accessibility & SEO
- a11y roles, skip link, focus management after route change
- Meta tags per event (title, description, og:image placeholder)

### F9 Observability
- Simple analytics hook (page view) (placeholder)
- ErrorBoundary for client components

## 7. Non-Functional Requirements
- Type safety: TypeScript strict mode
- Lighthouse performance >= 85 on mobile
- Basic unit tests for booking logic + React Query hooks
- CI placeholder (future)

## 8. Tech Stack (Proposed)
- Next.js (App Router, TypeScript)
- TanStack Query for client caching & async states
- Zustand (lightweight global UI state) OR Context (TBD) – initial assumption: Zustand
- Tailwind CSS for styling
- Testing: Jest + React Testing Library (MVP minimal set)

## 9. External Libraries (Doc Grounding Targets)
Will fetch docs via context7 for grounding and task expansion:
- Next.js routing & data fetching (App Router)
- TanStack Query hooks (useQuery, useMutation, invalidation)

## 10. API (Mock) (Assumed)
| Endpoint | Method | Purpose |
|----------|--------|---------|
| /api/events?page=&category= | GET | List events |
| /api/events/[id] | GET | Event detail |
| /api/bookings | POST | Create booking |
| /api/bookings | GET | List user bookings |
| /api/auth/login | POST | Login |
| /api/auth/logout | POST | Logout |
| /api/me | GET | Session info |

## 11. Data Models (Frontend Types)
```ts
type Event = {
	id: string;
	title: string;
	category: string;
	startsAt: string; // ISO
	venue: string;
	remainingSeats: number;
	description: string;
};

type Booking = {
	id: string;
	eventId: string;
	userId: string;
	status: 'CONFIRMED' | 'CANCELLED';
	createdAt: string;
};

type SessionUser = { id: string; email: string } | null;
```

## 12. Initial Milestones (High-Level)
1. Scaffold project + dependencies
2. Core layout & navigation
3. Event list + detail (static mock data -> API integration)
4. Auth forms + session handling
5. Booking flow w/ optimistic UI
6. My bookings page
7. Accessibility & SEO pass
8. Basic tests & performance tuning

## 13. Open Questions / Assumptions
- Payment skipped => booking auto-confirmed
- State mgmt: Keep global auth/session in React Query (useQuery + setQueryData) vs. Zustand? (Decide after doc grounding)
- Analytics provider TBD (dummy console log)

## 14. Doc Grounding Placeholders (to be auto-filled)
DocsRef (Next.js routing): PENDING
DocsRef (TanStack Query hooks): PENDING

## 15. Acceptance Criteria (Sample for Booking Flow)
- When user clicks Book, button shows loading and disables
- On success: toast "Booked", seat count decrements
- On seat exhaustion: error toast, seat count unchanged
- Network error: retry option displayed

---
Revision History:
- v0.1 Draft generated automatically (2025-08-16)
